{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\myahh\\\\OneDrive\\\\Documents\\\\boggle\\\\boggle-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport findAllSolutions from './boggle_solver.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\n//import logo from './logo.png';\nimport './App.css';\nimport { GAME_STATE } from './GameState.js';\nimport { RandomGrid } from './randomGen.js';\n// import LoginButton from './LoginButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [allSolutions, setAllSolutions] = useState([]);\n  const [foundSolutions, setFoundSolutions] = useState([]);\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE);\n  const [grid, setGrid] = useState([]);\n  const [totalTime, setTotalTime] = useState(0);\n  const [size, setSize] = useState(3);\n  const [user, setUser] = useState(null);\n\n  // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n    let tmpAllSolutions = findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]);\n\n  // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      if (size !== -11111)\n        // if Grid is not loaded from firestore\n        setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(LoginButton, {\n      setUser: user => setUser(user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), user != null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Welcome, \", user.displayName, \" (\", user.email, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"p1\", {\n        children: \"Boggle Solver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      width: \"10%\",\n      height: \"17%\",\n      class: \"logo\",\n      alt: \"Boggle Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToggleGameState, {\n      gameState: gameState,\n      setGameState: state => setGameState(state),\n      setSize: state => setSize(state),\n      setTotalTime: state => setTotalTime(state),\n      numFound: foundSolutions.length,\n      theGrid: JSON.stringify(grid),\n      setGrid: state => setGrid(state)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), gameState === GAME_STATE.IN_PROGRESS && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n        allSolutions: allSolutions,\n        foundSolutions: foundSolutions,\n        correctAnswerCallback: answer => correctAnswerFound(answer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n        headerText: \"Solutions you've found\",\n        words: foundSolutions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), gameState === GAME_STATE.ENDED && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SummaryResults, {\n        words: foundSolutions,\n        totalTime: totalTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n        headerText: \"Missed Words [wordsize > 3]: \",\n        words: allSolutions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Vz7QC+cWKOd6DCL8KwBNwqOYado=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","findAllSolutions","Board","GuessInput","FoundSolutions","SummaryResults","ToggleGameState","GAME_STATE","RandomGrid","App","allSolutions","setAllSolutions","foundSolutions","setFoundSolutions","gameState","setGameState","BEFORE","grid","setGrid","totalTime","setTotalTime","size","setSize","user","setUser","wordList","require","tmpAllSolutions","words","IN_PROGRESS","correctAnswerFound","answer","console","log","displayName","email","logo","state","length","JSON","stringify","ENDED"],"sources":["C:/Users/myahh/OneDrive/Documents/boggle/boggle-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport findAllSolutions from './boggle_solver.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\n//import logo from './logo.png';\nimport './App.css';\nimport {GAME_STATE} from './GameState.js';\nimport {RandomGrid} from './randomGen.js';\n// import LoginButton from './LoginButton.js';\n\nfunction App() {\n\n  const [allSolutions, setAllSolutions] = useState([]);\n  const [foundSolutions, setFoundSolutions] = useState([]);\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE);\n  const [grid, setGrid] = useState([]);\n  const [totalTime, setTotalTime] = useState(0);\n  const [size, setSize] = useState(3);\n  const [user, setUser] = useState(null);\n  \n  // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n    let tmpAllSolutions = findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]);\n\n  // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      if(size !== -11111)  // if Grid is not loaded from firestore\n          setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n\n  return (\n    <div className=\"App\">\n        <LoginButton setUser={(user) => setUser(user)} />\n        {user != null &&\n          <p>Welcome, {user.displayName} ({user.email})</p> \n        } \n        <div class=\"title\">\n          <p1>Boggle Solver</p1>\n        </div>\n        <img src={logo} width=\"10%\" height=\"17%\" class=\"logo\" alt=\"Boggle Logo\" /> \n        <ToggleGameState gameState={gameState}\n                       setGameState={(state) => setGameState(state)}\n                       setSize={(state) => setSize(state)}\n                       setTotalTime={(state) => setTotalTime(state)}\n                       numFound={foundSolutions.length}\n                       theGrid={JSON.stringify(grid)}\n                       setGrid={(state) => setGrid(state)}/>\n\n      { gameState === GAME_STATE.IN_PROGRESS &&\n        <div>\n          <Board board={grid} />\n\n          <GuessInput allSolutions={allSolutions}\n                      foundSolutions={foundSolutions}\n                      correctAnswerCallback={(answer) => correctAnswerFound(answer)}/>\n          <FoundSolutions headerText=\"Solutions you've found\" words={foundSolutions} />\n        </div>\n      }\n      { gameState === GAME_STATE.ENDED &&\n        <div>\n          <Board board={grid} />\n          <SummaryResults words={foundSolutions} totalTime={totalTime} />\n          <FoundSolutions headerText=\"Missed Words [wordsize > 3]: \" words={allSolutions}  />\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}