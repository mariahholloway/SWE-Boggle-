[{"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\index.js":"1","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\App.js":"2","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\reportWebVitals.js":"3","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\Board.js":"4","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\boggle_solver.js":"5","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\FoundSolutions.js":"6","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\SummaryResults.js":"7","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\GameState.js":"8","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\ToggleGameState.js":"9"},{"size":535,"mtime":1671143887307,"results":"10","hashOfConfig":"11"},{"size":3217,"mtime":1671148415130,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1671143887559,"results":"13","hashOfConfig":"11"},{"size":984,"mtime":1671147840905,"results":"14","hashOfConfig":"11"},{"size":4077,"mtime":1671141620839,"results":"15","hashOfConfig":"11"},{"size":399,"mtime":1671147171227,"results":"16","hashOfConfig":"11"},{"size":439,"mtime":1671148115001,"results":"17","hashOfConfig":"11"},{"size":198,"mtime":1671147957910,"results":"18","hashOfConfig":"11"},{"size":5668,"mtime":1671148121093,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1olkay2",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":15,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\index.js",[],[],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\App.js",["49","50"],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\Board.js",["51","52","53","54","55"],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\boggle_solver.js",["56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78"],[],"/**\r\n * Given a Boggle board and a dictionary, returns a list of available words in\r\n * the dictionary present inside of the Boggle board.\r\n * @param {string[][]} grid - The Boggle game board.\r\n * @param {string[]} dictionary - The list of available words.\r\n * @returns {string[]} solutions - Possible solutions to the Boggle board.\r\n */\r\n\r\n\r\n exports.findAllSolutions = function(grid, dictionary) {\r\n  let solutions = [];\r\n\r\n  // 1. Check inputs params are valid \r\n  // 1a. Check for any empty input\r\n  if(grid == null || dictionary == null)\r\n    return solutions;\r\n   \r\n  // 1b. Check if NXN\r\n  let N = grid.length;\r\n  for(let i = 0; i <N; i++){\r\n    if(grid[i].length != N){\r\n      \r\n      return solutions;\r\n    }\r\n  }\r\n   \r\n   // Convert input data into the same case\r\n  lowerCaseConvert(grid, dictionary);\r\n   \r\n   \r\n   // Check if Grid is valid\r\n   if(!isValidGrid(grid)){\r\n//        console.log('Test' + grid);\r\n     return solutions;\r\n   }\r\n   \r\n   \r\n   \r\n   // Set up data structures (visited, solutions, dictionary, Trie, hash, list, set)\r\n  \r\n  let solutionSet = new Set();\r\n  let hash = createHashMap(dictionary);\r\n   \r\n   // Iterate over the NxN grid\r\n   \r\n  for(let y = 0; y < N; y++){\r\n    for(let x = 0; x < N; x++){\r\n      let word = \"\";\r\n      \r\n      let visited = new Array(N).fill(false).map(() => new Array(N).fill(false));\r\n      \r\n      findWords(word, y, x, grid, visited, hash, solutionSet);\r\n    }\r\n  }\r\n  \r\n  solutions = Array.from(solutionSet);\r\n  return solutions;\r\n}\r\n\r\n  findWords = function(word, y, x, grid, visited, hash, solutionSet){\r\n    \r\n    let adjMatrix = [[-1, -1],\r\n                    [-1, 0],\r\n                    [-1, 1],\r\n                    [0, 1],\r\n                    [1, 1],\r\n                    [1, 0],\r\n                    [1, -1],\r\n                    [0, -1]];\r\n    \r\n    if (y < 0 || x < 0 || y >= grid.length || x >= grid.length || visited[y][x] == true)\r\n      return;\r\n    \r\n    word += grid[y][x];\r\n    \r\n//     console.log(\"Current Word = \" + word + \"\\nGrid[\" + y + \"][\" + x + \"] = \" + grid[x][y]);\r\n    \r\n    if(isPrefix(word, hash)) {\r\n      visited[y][x] = true;\r\n      \r\n      if(isWord(word, hash)) {\r\n        if(word.length >= 3)\r\n          solutionSet.add(word);\r\n      }\r\n      \r\n     for(let i = 0; i < 8; i++){\r\n       findWords(word, y + adjMatrix[i][0], x + adjMatrix[i][1], grid, visited, hash, solutionSet)\r\n        }\r\n    }\r\n    \r\n    visited[y][x] = false;\r\n  }\r\n  \r\n  isPrefix = function(word, hash) {\r\n    return hash[word] != undefined;\r\n\r\n  }\r\n\r\n  isWord = function(word, hash) {\r\n    return hash[word] == 1;\r\n  }\r\n\r\n  createHashMap = function(dictionary){\r\n    var dict = {};\r\n    for(let i = 0; i < dictionary.length; i++){\r\n      dict[dictionary[i]] = 1;\r\n      let wordlength = dictionary[i].length;\r\n      var str = dictionary[i];\r\n      for(let j = wordlength; wordlength > 1; wordlength--){\r\n        str = str.substr(0,wordlength-1);\r\n        if(str in dict){\r\n          if(str == 1){\r\n            dict[str] = 1;\r\n          }\r\n        }\r\n        else{\r\n          dict[str] = 0;\r\n        }\r\n      }\r\n    }\r\n    return dict;\r\n  }\r\n  \r\n  lowerCaseConvert = function(grid, dict){\r\n    for(let i = 0; i < grid.length; i++){\r\n      for(let j = 0; j < grid[i].length; j++){\r\n        grid[i][j] = grid[i][j].toLowerCase();\r\n      }\r\n    }\r\n    \r\n    for(let i = 0; i < dict.length; i++){\r\n      dict[i] = dict[i].toLowerCase();\r\n    }\r\n  }\r\n\r\n  isValidGrid = function(grid){\r\n    regex = /(st|qu)|[a-prt-z]/;\r\n    for(let i = 0; i < grid.length; i++){\r\n      for(let j = 0; j < grid[i].length; j++){\r\n        if(!grid[i][j].match(regex)){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\nvar grid = [['t', 'w', 'y', 'r'],\r\n              ['e', 'n', 'p', 'h'],\r\n              ['g', 'z', 'qu', 'r'],\r\n              ['o', 'n', 't', 'a']];\r\nvar dictionary = ['art', 'ego', 'gent', 'get', 'net', 'new', 'newt', 'prat',\r\n                    'pry', 'qua', 'quart', 'quartz', 'rat', 'tar', 'tarp',\r\n                    'ten', 'went', 'wet', 'arty', 'egg', 'not', 'quar'];\r\n","C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\FoundSolutions.js",[],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\SummaryResults.js",[],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\GameState.js",[],[],"C:\\Users\\myahh\\OneDrive\\Documents\\boggle\\boggle-app\\src\\ToggleGameState.js",[],[],{"ruleId":"79","severity":2,"message":"80","line":49,"column":10,"nodeType":"81","messageId":"82","endLine":49,"endColumn":21},{"ruleId":"83","severity":2,"message":"84","line":56,"column":19,"nodeType":"85","messageId":"86","endLine":56,"endColumn":23},{"ruleId":"79","severity":2,"message":"87","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":12},{"ruleId":"79","severity":2,"message":"88","line":11,"column":10,"nodeType":"81","messageId":"82","endLine":11,"endColumn":15},{"ruleId":"79","severity":2,"message":"87","line":20,"column":8,"nodeType":"81","messageId":"82","endLine":20,"endColumn":12},{"ruleId":"79","severity":2,"message":"87","line":30,"column":8,"nodeType":"81","messageId":"82","endLine":30,"endColumn":12},{"ruleId":"79","severity":2,"message":"87","line":40,"column":8,"nodeType":"81","messageId":"82","endLine":40,"endColumn":12},{"ruleId":"89","severity":1,"message":"90","line":21,"column":23,"nodeType":"91","messageId":"92","endLine":21,"endColumn":25},{"ruleId":"83","severity":2,"message":"93","line":28,"column":3,"nodeType":"85","messageId":"86","endLine":28,"endColumn":19},{"ruleId":"83","severity":2,"message":"94","line":32,"column":8,"nodeType":"85","messageId":"86","endLine":32,"endColumn":19},{"ruleId":"83","severity":2,"message":"95","line":42,"column":14,"nodeType":"85","messageId":"86","endLine":42,"endColumn":27},{"ruleId":"83","severity":2,"message":"96","line":52,"column":7,"nodeType":"85","messageId":"86","endLine":52,"endColumn":16},{"ruleId":"83","severity":2,"message":"96","line":60,"column":3,"nodeType":"85","messageId":"86","endLine":60,"endColumn":12},{"ruleId":"89","severity":1,"message":"97","line":71,"column":81,"nodeType":"91","messageId":"92","endLine":71,"endColumn":83},{"ruleId":"83","severity":2,"message":"98","line":78,"column":8,"nodeType":"85","messageId":"86","endLine":78,"endColumn":16},{"ruleId":"83","severity":2,"message":"99","line":81,"column":10,"nodeType":"85","messageId":"86","endLine":81,"endColumn":16},{"ruleId":"83","severity":2,"message":"96","line":87,"column":8,"nodeType":"85","messageId":"86","endLine":87,"endColumn":17},{"ruleId":"83","severity":2,"message":"98","line":94,"column":3,"nodeType":"85","messageId":"86","endLine":94,"endColumn":11},{"ruleId":"89","severity":1,"message":"90","line":95,"column":23,"nodeType":"91","messageId":"92","endLine":95,"endColumn":25},{"ruleId":"83","severity":2,"message":"99","line":99,"column":3,"nodeType":"85","messageId":"86","endLine":99,"endColumn":9},{"ruleId":"89","severity":1,"message":"97","line":100,"column":23,"nodeType":"91","messageId":"92","endLine":100,"endColumn":25},{"ruleId":"83","severity":2,"message":"95","line":103,"column":3,"nodeType":"85","messageId":"86","endLine":103,"endColumn":16},{"ruleId":"100","severity":1,"message":"101","line":109,"column":15,"nodeType":"85","messageId":"102","endLine":109,"endColumn":16},{"ruleId":"89","severity":1,"message":"97","line":112,"column":18,"nodeType":"91","messageId":"92","endLine":112,"endColumn":20},{"ruleId":"83","severity":2,"message":"93","line":124,"column":3,"nodeType":"85","messageId":"86","endLine":124,"endColumn":19},{"ruleId":"83","severity":2,"message":"94","line":136,"column":3,"nodeType":"85","messageId":"86","endLine":136,"endColumn":14},{"ruleId":"83","severity":2,"message":"103","line":137,"column":5,"nodeType":"85","messageId":"86","endLine":137,"endColumn":10},{"ruleId":"83","severity":2,"message":"103","line":140,"column":30,"nodeType":"85","messageId":"86","endLine":140,"endColumn":35},{"ruleId":"100","severity":1,"message":"104","line":149,"column":5,"nodeType":"85","messageId":"102","endLine":149,"endColumn":9},{"ruleId":"100","severity":1,"message":"105","line":153,"column":5,"nodeType":"85","messageId":"102","endLine":153,"endColumn":15},"react/jsx-no-undef","'LoginButton' is not defined.","JSXIdentifier","undefined","no-undef","'logo' is not defined.","Identifier","undef","'Grid' is not defined.","'Paper' is not defined.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'lowerCaseConvert' is not defined.","'isValidGrid' is not defined.","'createHashMap' is not defined.","'findWords' is not defined.","Expected '===' and instead saw '=='.","'isPrefix' is not defined.","'isWord' is not defined.","no-unused-vars","'j' is assigned a value but never used.","unusedVar","'regex' is not defined.","'grid' is assigned a value but never used.","'dictionary' is assigned a value but never used."]